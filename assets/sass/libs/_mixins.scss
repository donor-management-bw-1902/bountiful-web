/// Makes an element's :before pseudoelement a FontAwesome icon.
/// @param {string} $content Optional content value to use.
/// @param {string} $where Optional pseudoelement to target (before or after).
@mixin icon($content: false, $where: before) {

	text-decoration: none;

	&:#{$where} {

		@if $content {
			content: $content;
		}

		-moz-osx-font-smoothing: grayscale;
		-webkit-font-smoothing: antialiased;
		font-family: FontAwesome;
		font-style: normal;
		font-weight: normal;
		text-transform: none !important;

	}

}

/// Applies padding to an element, taking the current element-margin value into account.
/// @param {mixed} $tb Top/bottom padding.
/// @param {mixed} $lr Left/right padding.
/// @param {list} $pad Optional extra padding (in the following order top, right, bottom, left)
/// @param {bool} $important If true, adds !important.
@mixin padding($tb, $lr, $pad: (0,0,0,0), $important: null) {

	@if $important {
		$important: '!important';
	}

	$x: 0.1em;

	@if unit(_size(element-margin)) == 'rem' {
		$x: 0.1rem;
	}

	padding: ($tb + nth($pad,1)) ($lr + nth($pad,2)) max($x, $tb - _size(element-margin) + nth($pad,3)) ($lr + nth($pad,4)) #{$important};

}

/// Encodes a SVG data URL so IE doesn't choke (via codepen.io/jakob-e/pen/YXXBrp).
/// @param {string} $svg SVG data URL.
/// @return {string} Encoded SVG data URL.
@function svg-url($svg) {

	$svg: str-replace($svg, '"', '\'');
	$svg: str-replace($svg, '%', '%25');
	$svg: str-replace($svg, '<', '%3C');
	$svg: str-replace($svg, '>', '%3E');
	$svg: str-replace($svg, '&', '%26');
	$svg: str-replace($svg, '#', '%23');
	$svg: str-replace($svg, '{', '%7B');
	$svg: str-replace($svg, '}', '%7D');
	$svg: str-replace($svg, ';', '%3B');

	@return url("data:image/svg+xml;charset=utf8,#{$svg}");

}


// Dark (mixin)

@mixin dark($color-this-bg: _palette(dark, bg)) {
	background-color: $color-this-bg;
	color: _palette(dark, fg);

	a {
		border-bottom-color: transparentize(_palette(dark, fg), 0.25);

		&:hover {
			color: _palette(dark, fg-bold);
		}
	}

	h1, h2, h3, h4, h5, h6, strong, b {
		color: _palette(dark, fg-bold);
	}

	header {
		p {
			color: _palette(dark, fg-bold);
		}

		&.major {
			&:after {
				background: _palette(dark, border);
			}
		}
	}

	input[type="submit"],
	input[type="reset"],
	input[type="button"],
	button,
	.button {
		box-shadow: inset 0 0 0 1px _palette(dark, border);
		color: _palette(dark, fg-bold) !important;

		&:hover {
			background-color: _palette(dark, border-bg);
		}

		&:active {
			background-color: _palette(dark, border2-bg);
		}

		&.primary {
			background-color: _palette(dark, accent1);
			box-shadow: inset 0 0 0 1px _palette(accent1) !important;
			color: #ffffff;
      // font-weight: bolder;

			&:hover {
				background-color: _palette(dark, fg-light) !important;
				color: saturate(_palette(accent1), 40) !important;
        font-weight: 600;
			}

			&:active {
				background-color: _palette(dark, border2-bg) !important;
			}
		}
	}

	ul {
		&.major-icons {
			li {
				.icon {
					border-color: _palette(dark, border);
				}
			}
		}
	}

	.icon {
		&.major {
			color: _palette(dark, fg-bold);
		}
	}
}
